#!/usr/bin/perl

use strict;
use warnings FATAL => 'all';

use 5.010;

use lib qw(/usr/share/slackman/lib/perl5);

use Net::DBus;
use Net::DBus::Reactor;

use POSIX;
use Getopt::Long qw(:config);
use Pod::Usage;
use FindBin;

use Slackware::SlackMan;
use Slackware::SlackMan::Config  qw(:all);
use Slackware::SlackMan::Utils   qw(:all);

my $VERSION = "v1.4.0";
my $options = {};

GetOptions( $options,
  'help|h',
  'version|v',
  'action=s',
  'man'
);

show_help()    if ($options->{'help'});
show_version() if ($options->{'version'});

pod2usage(-exitval => 0, -verbose => 2) if $options->{'man'};

my $home_dir         = $ENV{'HOME'};
my $user_config_file = "$home_dir/.slackman-notifier";

my $cfg = Slackware::SlackMan::Config->new($user_config_file);

create_user_config() unless (-e $user_config_file);

my $action = $options->{'action'} || 'main';

print STDOUT "SlackMan Notifier $VERSION ($action - pid:$$)\n";

if ($options->{'action'}) {

  action_listner()  if ($options->{'action'} eq 'listner');
  action_notifier() if ($options->{'action'} eq 'notifier');

} else {

  fork or exec("$FindBin::Bin/slackman-notifier --action=listner");
  fork or exec("$FindBin::Bin/slackman-notifier --action=notifier");

}

while(1) { wait(); }

print STDOUT "Exit from SlackMan Notifier ($action - pid:$$)\n";
exit(0);


# Notify via freedesktop.org Notification service
#
sub notify {

  my ($params) = @_;

  my $app_name  = 'SlackMan';
  my $id        = int(rand(64*1024));
  my $app_icon  = $params->{'icon'}    || '';
  my $summary   = $params->{'summary'} || '';
  my $body      = $params->{'body'}    || '';
  my $timeout   = $params->{'timeout'} || 0;
  my $actions   = $params->{'actions'} || {};
  my %actions   = ();

  my $reactor = Net::DBus::Reactor->main;

  if ( keys %{$actions} ) {

    foreach my $id ( keys %{$actions} ) {
      $actions{$id} = $actions->{$id}->{'label'};
    }

    dbus_notifications->connect_to_signal("ActionInvoked" => sub {

      my ($to_id, $action_key) = @_;
      logger->info("org.freedesktop.Notify->ActionInvoked: action invoked (id:$to_id, key:$action_key)");

      if ( defined( $actions->{$action_key}->{'callback'} ) ) {
        $actions->{$action_key}->{'callback'}->();
      }

      $reactor->shutdown();

    });

  }

  logger->info(sprintf("Send notification via org.freedesktop.Notify (id:%s)", $id));

  dbus_notifications->Notify($app_name, $id, $app_icon, $summary, $body, [ %actions ], {}, $timeout);

  if ( keys %actions ) {

    $reactor->add_timeout( 30 * 1_000, sub {
      print STDOUT "timeout";
      $reactor->shutdown();
    }, 1);

    $reactor->run();

  }

}


# Create a simple UNIX daemon
#
sub daemonize {

  my ($cmd) = @_;

  chdir("/")                  || die "can't chdir to /: $!";
  open(STDIN,  "< /dev/null") || die "can't read /dev/null: $!";
  #open(STDOUT, "> /dev/null") || die "can't write to /dev/null: $!";
  defined(my $pid = fork())   || die "can't fork: $!";
  exit if $pid;               # non-zero now means I am the parent
  (setsid() != -1)            || die "Can't start a new session: $!";
  open(STDERR, ">&STDOUT")    || die "can't dup stdout: $!";

  system($cmd);

  return $$; # Return effective PID

}


sub check_upgrade {

  logger->info('Check packages upgrade using SlackMan D-Bus service');

  my $upgrades = dbus_slackman->CheckUpgrade();
  my $max_timestamp = 0; # Max timestamp
  my $upgrades_body = '';

  my @pkgs = ();

  return unless ( keys %{$upgrades} );

  foreach my $package ( sort keys %{$upgrades} ) {

    push(@pkgs, $package);

    $upgrades_body .= sprintf(" ● %s <i>%s</i> ➜ <i>%s</i>\n",
                              $package,
                              $upgrades->{$package}->{'old_version_build'},
                              $upgrades->{$package}->{'new_version_build'});

  }

  my $pkgs_string = join(',', sort(@pkgs));

  my $current_packages  = $cfg->get('packages.upgrades')    || '';
  my $current_timestamp = $cfg->get('last_update.upgrades') || 0;

  # Remember the user after 6h
  return if ( $pkgs_string eq $current_packages && time() < ($current_timestamp + (3600 * 6)) );

  # Save actual package list
  $cfg->set('packages.upgrades',    $pkgs_string);
  $cfg->set('last_update.upgrades', time());

  $cfg->save();

  return unless ($upgrades_body);

  notify({
    'icon'    => 'system-software-update',
    'summary' => 'Slackware Package Updates Available',
    'body'    => $upgrades_body,
  });

}


sub check_announces {

  logger->info('Get new ChangeLog Announce items from SlackMan D-Bus service');

  my $announces     = dbus_slackman->Announce( undef ); # Get ChangeLog Announces for all repositories
  my $max_timestamp = 0; # Max ChangeLog entry timestamp
  my $announce_body = '';

  return unless ( keys %{$announces} );

  foreach my $repo (keys %{$announces}) {

    foreach ( @{$announces->{$repo}} ) {

      my $announce = $_->{'announce'};
         $announce =~ s/\n/ /gm;

      $announce_body .= "<b>$repo repository</b>\n";
      $announce_body .= sprintf("<i>%s</i>\n", datetime_h(timestamp_to_time($_->{'timestamp'})));
      $announce_body .= "$announce\n";
      $announce_body .= sprintf("\n%s\n", "-"x32);

      $max_timestamp = timestamp_to_time($_->{'timestamp'}) if ($max_timestamp < timestamp_to_time($_->{'timestamp'}));

    }

  }

  my $current_last_update = $cfg->get('last_update.announce') || 0;

  return unless ($max_timestamp > $current_last_update);

  $cfg->set('last_update.announce', $max_timestamp);
  $cfg->save();

  return unless ($announce_body);

  notify({
    'icon'    => '/usr/share/slackman/slackware.png',
    'summary' => 'Slackware ChangeLog Announces',
    'body'    => $announce_body,
  });

}


sub check_changelogs {

  logger->info('Get new ChangeLog items from SlackMan D-Bus service');

  my $changelogs = dbus_slackman->ChangeLog( undef ); # Get ChangeLogs for all repositories
  my $max_timestamp  = 0; # Max ChangeLog entry timestamp
  my $changelog_body = '';

  return unless ( keys %{$changelogs} );

  foreach my $repo (keys %{$changelogs}) {

    $changelog_body .= sprintf("<b>%s repository</b>\n", $repo);

    foreach ( @{$changelogs->{$repo}} ) {

      $changelog_body .= sprintf(" ● %s (<i>%s %s</i>)\n", $_->{'package'}, $_->{'status'}, datetime_h(timestamp_to_time($_->{'timestamp'})));

      $max_timestamp = timestamp_to_time($_->{'timestamp'}) if ($max_timestamp < timestamp_to_time($_->{'timestamp'}));

    }

    $changelog_body .= sprintf("\n%s\n", "-"x32);

  }

  my $current_last_update = $cfg->get('last_update.changelog') || 0;

  return unless ($max_timestamp > $current_last_update);

  $cfg->set('last_update.changelog', $max_timestamp);
  $cfg->save();

  return unless ($changelog_body);

  notify({
    'icon'    => '/usr/share/slackman/slackware.png',
    'summary' => 'Slackware ChangeLogs',
    'body'    => $changelog_body,
  });

}


# Check latest Security Advisories from all Slackware repository ChangeLogs and notify via DBus
#
sub check_security_advisories {

  logger->info('Get new Security Advisories from SlackMan D-Bus service');

  my $security_fix  = dbus_slackman->SecurityFix();
  my $max_timestamp = 0; # Max ChangeLog entry timestamp

  return unless ( keys %{$security_fix} );

  my $security_fix_hash = {};
  my $security_fix_body = '';

  foreach my $repo (keys %{$security_fix}) {
    foreach ( @{$security_fix->{$repo}} ) {
      push(@{ $security_fix_hash->{$repo}->{ $_->{'timestamp'} } }, $_);
      $max_timestamp = timestamp_to_time($_->{'timestamp'}) if ($max_timestamp < timestamp_to_time($_->{'timestamp'}));
    }
  }

  my $current_last_update = $cfg->get('last_update.security_fix') || 0;

  return unless ($max_timestamp > $current_last_update);

  $cfg->set('last_update.security_fix', $max_timestamp);
  $cfg->save();

  foreach my $repo (keys %{$security_fix_hash}) {
    foreach my $timestamp (keys %{$security_fix_hash->{$repo}}) {

      $security_fix_body .= sprintf("<b>%s repository</b>\n<i>%s</i>\n", $repo, $timestamp);

      foreach my $changelog (@{$security_fix_hash->{$repo}->{$timestamp}}) {

        my $package = $changelog->{'package'};

        my $description = $changelog->{'description'};
           $description = "\n<i>$description</i>" if ($description);

        $security_fix_body .= sprintf(" ● %s\n%s\n", $package, $description);

      }

      $security_fix_body .= sprintf("\n%s\n", "-"x32);

    }
  }

  notify({
    'icon'    => '/usr/share/slackman/slackware.png',
    'summary' => 'Slackware Security',
    'body'    => $security_fix_body,
  });

}


sub action_notifier {

  do {

    # Check latest Security Advisories from all Slackware repository ChangeLogs
    check_security_advisories();

    sleep(5);

    # Check latest Slackware ChangeLog Announces from all Slackware repository
    check_announces();

    sleep(5);

    # Check latest Slackware ChangeLogs from all Slackware repository
    check_changelogs();

    sleep(5);

    # Check local package upgrade
    check_upgrade();

    sleep(3600);

  } while (1);

}


sub action_listner {

  my $SlackMan = dbus_slackman();

  sub _notify {

    my ($action, $icon, $package) = @_;

    my $body = '';

    foreach (split(',', $package)) {

      if (lc($action) eq 'removed') {

        $body .= " ● $_\n";

      } else {

        my $pkg_info = get_package_info($_);

        $body .= sprintf(" ● %s (%s-%s)\n",
          $pkg_info->{'name'}    || $_,
          $pkg_info->{'version'} || '',
          $pkg_info->{'build'}   || ''
        );

      }
    }

    notify ({
      'icon'    => $icon,
      'summary' => "$action Slackware Package",
      'body'    => $body
    });

  }

  sub _notify_installed { _notify('Installed', 'system-software-install', @_) };
  sub _notify_upgraded  { _notify('Upgraded',  'system-software-update',  @_) };
  sub _notify_removed   { _notify('Removed',   'system-software-update',  @_) };


  logger->debug('Listen "org.lotarproject.SlackMan.PackageInstalled" signal');
  $SlackMan->connect_to_signal('PackageInstalled', \&_notify_installed);

  logger->debug('Listen "org.lotarproject.SlackMan.PackageUpgraded" signal');
  $SlackMan->connect_to_signal('PackageUpgraded', \&_notify_upgraded);

  logger->debug('Listen "org.lotarproject.SlackMan.PackageRemoved" signal');
  $SlackMan->connect_to_signal('PackageRemoved', \&_notify_removed);

  logger->debug('Listen "org.lotarproject.SlackMan.UpdatedChangeLog" signal');
  $SlackMan->connect_to_signal('UpdatedChangeLog', sub { check_changelogs;
                                                         check_security_advisories });

  logger->debug('Listen "org.lotarproject.SlackMan.UpdatedPackages" signal');
  $SlackMan->connect_to_signal('UpdatedPackages', sub { check_upgrade() });


  my $reactor=Net::DBus::Reactor->main();
  $reactor->run();
  exit 0;

}


# Create an empty config file
#
sub create_user_config {

  logger->debug(sprintf('Create user config in %s', $cfg->{'file'}));

  $cfg->{'data'} = {
    'last_update' => {
      'changelog'    => 0,
      'security_fix' => 0,
      'announce'     => 0,
    }
  };

  $cfg->save();

}


sub show_version {
  print sprintf("SlackMan - Slackware Package Manager Notifier %s\n\n", $VERSION);
  exit(0);
}


sub show_help {

  pod2usage(
    -message  => "SlackMan - Slackware Package Manager Notifier $VERSION\n",
    -exitval  => 0,
    -verbose  => 99,
    -sections => 'SYNOPSIS|OPTIONS',
  );

}

__END__
=head1 NAME

slackman-notifier - SlackMan Notification Tool

=head1 SYNOPSIS

  /usr/libexec/slackman/slackman-notifier [-d|--daemon] [-h|--help] [-v|--version] [--man]

=head1 DESCRIPTION

B<slackman-notifier> is user-space utility to receive a desktop notification via
D-Bus (using B<org.freedesktop.Notification> service) for Slackware Security
Advisories, Announces, ChangeLogs, new packages upgrade and post-install/upgrade/remove summary.

=head1 OPTIONS

  --action=[listner,notifier]  Execute in listner or notifier mode
  -h, --help                   Display help and exit
  --man                        Display man page
  --version                    Display version information

=head1 SEE ALSO

L<slackman(8)>, L<slackman-service(1)>, L<dbus-monitor(1)>

=head1 BUGS

Please report any bugs or feature requests to 
L<https://github.com/LotarProject/slackman/issues> page.

=head1 AUTHOR

Giuseppe Di Terlizzi <giuseppe.diterlizzi@gmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright 2016-2018 Giuseppe Di Terlizzi.

This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:

L<http://www.perlfoundation.org/artistic_license_2_0>
